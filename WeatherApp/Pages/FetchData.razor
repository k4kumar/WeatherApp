@page "/fetchdata"

@using WeatherApp.Data
@using Models
@inject WeatherForecastService ForecastService


<h1>Weather forecast</h1>

<p>Enter a city name to get weather details</p>

<EditForm Model="@newCity" OnValidSubmit="@CheckWeather">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="cityName" @bind-Value="@newCity.CityName" placeholder="City name"></InputText>
    <button class="btn btn-primary" type="submit">Check</button>
</EditForm>
<br />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>City</th>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Feels Like</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                if (forecast.City == "City not found")
                {
                    <tr>
                        <td colspan="6">@forecast.City</td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>@forecast.City</td>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.FeelsLike</td>
                        <td>@forecast.Description</td>
                    </tr>
                }

            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private CityViewModel newCity = new CityViewModel();


    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync();
    }

    protected async Task CheckWeather()
    {
        forecasts = await ForecastService.GetForecastAsync(newCity.CityName);
    }
}
